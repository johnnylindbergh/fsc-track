
/*
  routes.js: System routes for most requests
*/

const db    = require('./database.js');
const sys   = require('./settings.js');
const mid   = require('./middleware.js');

module.exports = function(app) {

  app.get('/admin', mid.isAuth, (req, res) => {
    if (req.user.local.user_type == 2){
       res.redirect('/')
    } else {
    var render = defaultRender(req);
    db.getJobs(req, res, function (err, rows){
      render.jobs = rows;
      console.log(render)
      res.render("admin.html", render);
    });
}
  });

  app.get('/', (req, res) => {
    var render = defaultRender(req);

    if (req.isAuthenticated() && req.user && req.user.local) {
    console.log(req.user.local)
    if (req.user.local.user_type == 1){
    	res.redirect('/admin');
    } else {
       var userEmail = req.user.local.email;
       var userId = req.user.local.id;
       db.getJobs(req, res, function (err, jobs){
          render.jobs = jobs;
          db.getTasks(req, res, function (err, tasks){
             render.tasks = tasks;
             db.lookUpUser(userEmail, function(err, rows){
                render.clockedIn = rows.clockedIn;
                //console.log(render);
                //res.send(render)
                res.render("main.html", render);
            });
          });
        });
      }
    } else {
       res.render("welcome.html", render);

    }
  });

//app.post("clockIn")


app.post('/addJob',mid.isAuth, function (req, res){
        // start with default render object
        var render = defaultRender(req);
        //console.log(req.body.jobName);
        // ensure given name exists
        if (req.body.jobName) {
                // create new job entry in DB
                db.createJob(req.body.jobName, function(err) {
                  res.redirect('/admin');
                        // if (!err) {
                        //  res.render('message.html', Object.assign(render, { 
                        //     message: "The job \"" + req.body.jobName + "\" was successfully created!",
                        //     link: {
                        //       href: "/tools",
                        //       text: "Return to admin Tools"
                        //     }
                        //   }));
                        // } else {
                        //   res.render('error.html', Object.assign(render, { 
                        //     message: "The system was unable to create the classroom \"" + req.body.jobName + "\".",
                        //     link: {
                        //       href: "/tools",
                        //       text: "Return to System Tools"
                        //     },
                              
                        //     function: "tools.addJob",
                        //     raw: err
                        //     }));
                        // }
                });
        } else {
                // render error page for lack of name
        }
});

app.post('/clockIn', mid.isAuth, function(req, res){
  var job = req.body.jobName;
  var task = req.body.taskName;
  var userId = req.user.local.id;
  console.log(job)
  db.clockIn(userId, job, task, function(err){
    if (!err){
      res.redirect('/');
    } else {
      res.send(err);
    }
  });
  //console.log(req.user.local);

});

app.post('/deleteJob', mid.isAuth, function(req, res){
  var job = req.body.jobName;
  var userId = req.user.local.id;
  console.log(job)
  db.deleteJob(job, function(err){
    if (!err){
      res.redirect('/admin');
    } else {
      res.send(err);
    }
  });
  //console.log(req.user.local);

});

app.post('/clockOut', mid.isAuth, function(req, res){
  var job = req.body.jobName;
  var task = req.body.taskName;
  var userId = req.user.local.id;
  console.log(task)
  db.clockOut(userId, job, function(err){
    if (!err){
      res.redirect('/');
    } else {
      res.send(err);
    }
  });
  //console.log(req.user.local);
  

});


//    console.log(req._json);
 //   db.getJobs(req, res, function (err, rows){
//      console.log(rows);
 //     res.render("sample.html",{jobs:rows});
 //   });

  /*
    ************************************
    *                                  *
    *   Routes go here...              *
    *                                  *
    *   app.get('/', (req, res) => {   *
    *     ...                          *
    *   });                    
app.get('/getRAlocationStats', (req, res) => {
   // renderMessages(req,res)
   db.getRAlocationStats(req, res, function (loc){
      console.log(loc);
      res.render('locations.html', {locations:loc});
   });


});        *
    *                                  *
    ************************************
  */

}

function defaultRender(req) {
  if (req.isAuthenticated() && req.user && req.user.local) {
    // basic render object for fully authenticated user
    return {
      inDevMode: sys.DEV_MODE,
      auth: {
        isAuthenticated: true,
        userIsAdmin: req.user.local.isAdmin,
        message: "Welcome, " + req.user.name.givenName + "! (" + req.user.local.email + ")"
      },
      defaults:{
        sysName:sys.SYSTEM_NAME
      }
    };
  } else {
    // default welcome message for unauthenticated user
    return {
      inDevMode: sys.inDevMode,
      auth: {
        message: "Welcome! Please log in."
      }
    };
  }
}
